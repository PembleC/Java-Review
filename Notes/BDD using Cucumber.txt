// BDD using Cucumber
// Carson Pemble
// 12/15/2020

TFD = Test First Development
  TDD = Test Driven Development
    ATDD = Acceptance Test Driven Development
      BDD = Behavior Driven Development
        1) Specification by Example
        2) Three Amigos model of working
        3) A shared tool to implement SbE based ATDD tests
        4) An automation testing framework to implement TDD and ATDD tests

BDD using Cucumber:
Cucumber is built over Selenium.

1)
2) Stand Alone Server
3)
4) BrowserDriver
5) Java jar File
6) Junit or TestNg Apache POI


Gherkin
The Language of Cucumber Feature Files: Similar to the English language
Keywords: Scenario / Given / Then / When / And
The Full list of key words are:
    Feature: It is list of scenarios
    Scenario: Business rule through list of steps with arguments
    Given: Some precondition step
    When: Some key actions
    Then: To observe outcomes or validation
    And,But: To enumerate more Given,When,Then steps
    Scenario Outline: List of steps for data-driven as an Examples and <placeholder>
    Examples: Container for s table
    Background: List of steps run before each of the scenarios
    """ (Doc Strings): This is used for representing strings
    | (Data Tables): This is used to present the data values in table form
    @ (Tags/Labels):To group Scenarios
    <> (placeholder)
    # For giving comments in Feature File

Given = Condition     = I open the FB URL
When = Inputs         = I entered Username and Password
Then = Behavior       = I got the home page displayed

Features (User Stories) - Loging in, Sending friend request
Scenario (Behaviors)  -
Steps (Examples) -


1) Set up Cucumber
    Install Cucumber Plugin
    Add Selenium Jars
      Selenium-Java
      Selenium-stand alone Server
    Add Cucumber Jars (core htmls java junit jvm ... etc)    C:\Users\Carson Pemble\OneDrive\Documents\Eclipse JARs\Cucumber
2) Create Feature Files
    Inside the cucu package
    SEE "Sample Gherkin File"
    Run Gherkin files to get code snip-its
3) Create Step Definition
    SEE "Sample GherkinToJava File"
    Run Gherkin file again (It runs the Java file)
4) Execute Feature File with Runner Class
    SEE "Sample Test Runner Class"
    Run as Junit TestNg
    Refresh project to look at reports
5) Enhance Feature Files
    Implement Parameterization - SEE "Cucumber Parameterization.feature"
    Work with Regular Expressions - . = anything / * = 0 or more / + = 1 or more
    Add Tags - Multiple Tags - '~' means not / ',' means OR / seperate tags means AND
    Create Reports - HTML = Pretty Format. index.html -> Open With -> Web Browser
    Implement Hooks - @Before and @After will run for scenario


Gherkin Doc String:
    @regression
    Scenario: Fill in search form

      When I fill in "search" with:
        """
       Test Automation using selenium and cucumber
        """


Maven Integration of Cucumber:
  Project root: This is the project root tag.
  Model version: The Model version should be 4.0.0
  groupId: This is an Id of the project's group.
  artifactId: This is an Id of the project.
  version: This is the version of the project.

  EX:
    <project xmlns = "http://maven.apache.org/POM/4.0.0"
      xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation = "http://maven.apache.org/POM/4.0.0
      http://maven.apache.org/xsd/maven-4.0.0.xsd">
      <modelVersion>4.0.0</modelVersion>
      <groupId>com.companyname.project-group</groupId>
      <artifactId>project</artifactId>
      <version>1.0</version>
    </project>


TestNG:
  TestNG should be installed in Eclipse.
  All the required Jar files related to cucumber and cucumber-testng should be available.
    Runner Class should use TestNG:
        package demos;
        import io.cucumber.junit.Cucumber;
        import io.cucumber.testng.AbstractTestNGCucumberTests;
        import io.cucumber.testng.CucumberOptions;
        @CucumberOptions(
        		features={"src\\demos"}

        		)
        public class TestNGRunnerTest extends AbstractTestNGCucumberTests{
        }

    XML File:
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
      <suite name="Suite">
        <test name="Test">
        <classes>
        <class name="demos.TestNGRunnerTest"></class>
        </classes>
        </test> <!-- Test -->
      </suite> <!-- Suite -->


Extent Reports in Cucumber:
  Add dependencies
  Update the plugin
  Modify Runner Class
    @CucumberOptions(
        features ="src/test/java/sampleextendreport",
        plugin = {"com.cucumber.listener.ExtentCucumberFormatter:target/cucumber-reports/report.html" },
        monochrome = true
    )
  Run as JUnit Test
  Open Report.html with Web Browser







Pre-Requisites to write Selenium Automation Test:
  Setup Java on system
    Selenium  & Cucumber require a version of Java to be on the system you’re running your tests
    Go to CMD and type java -version it should display the version of java installed on your machine else raise AHD to the software
  Setup Eclipse on the system
    Eclipse is one of several widely popular editors for Java. It’s an open-source project maintained by the Eclipse Foundation, and has a huge marketplace of add-ons, tools, and customization
    Navigate to Sparsh >> Downloads >> Eclipse IDE for Java EE Developers >> download Oxygen
  Setup Maven

The key points about Maven Installation and configuration :
  The plugin is being installed from the Eclipse Marketplace.
  An update URL is used for installation.
  Open internet is required to perform the installation through Eclipse Marketplace.
  Installation success can be verified by checking for the availability of Maven preference under the options Window -> Preferences.
  To configure maven in the machine, the MAVEN_HOME environment variable has to be set.
  The variable should contain the path to the maven bin installable. eg: If the installable is in the path: C:\maven\apache-maven-3.3.9, the environment variable should contain the value: C:\maven\apache-maven-3.3.9\bin .
  The configuration can be verified by opening the command prompt and typing mvn -version.
  The settings.xml  file provided by the tools group should be placed inside C:\Users\<<Username>>\.m2.  Please download the settings.xml file.
  The settings.xml  file should also be kept inside the conf folder inside the maven bin installable.

Writing your first End to End test using Selenium
  Please refer to the URL for the demo Maven Demo

Converting Selenium Test into Cucumber BDD Style Test
    Add Cucumber Dependencies to the Project
    Write a test in a Feature File
    Create a Test Runner
    Write test code to Step file
    Execute test as JUnit test & Maven Command Line
